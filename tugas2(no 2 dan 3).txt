Soal 2
Mengapa sangat penting untuk memahami bahasa pemrograman Dart sebelum kita menggunakan framework Flutter ? Jelaskan!
Jawab:Memahami bahasa pemrograman Dart penting sebelum menggunakan Flutter karena Dart adalah bahasa yang mendasari Flutter. 
Penguasaan konsep dasar seperti variabel, fungsi, dan class di Dart akan membantu logika aplikasi Flutter dengan baik. 
Selain itu, pemrograman asinkron di Dart, seperti penggunaan Future dan Stream, sangat berguna untuk menangani operasi berat tanpa mengganggu UI. 
Dart juga mendukung konsep OOP yang diperlukan untuk membuat widget dan mengelola state di Flutter. 
Dengan memahami Dart, kita akan bisa menulis kode yang efisien, terstruktur, dan optimal untuk menghasilkan aplikasi Flutter yang cepat dan responsif.

Soal 3
Rangkumlah materi dari codelab ini menjadi poin-poin penting yang dapat Anda gunakan untuk membantu proses pengembangan aplikasi mobile menggunakan framework Flutter
Jawab: Berikut adalah rangkuman poin-poin penting dari materi codelab
- Pada Pertemuan 01 yaitu Pengantar Pemograman Mobile berisi set up atau awal yang harus dilakukan sebelum melakukan pembelajaran pemograman mobile dengan cara 
memahami konsep dasar dan menyiapkan aplikasi aplikasi yang dibutuhkan dalam mata kuliah pemograman mobile ini.
-Pada Pertemuan 02 hingga 04 akan mempelajari bahasa dart sebagai fundamental atau awal sebelum melangkah ke flutter. karena dengan memahami Dart,
kita akan bisa menulis kode yang efisien, terstruktur, dan optimal untuk menghasilkan aplikasi Flutter yang cepat dan responsif.
isi dari pertemuan ini diantaranya:
1. Pengenalan Dart:
Productive Tooling: Menyediakan alat untuk menganalisis kode, plugin IDE, dan ekosistem paket yang luas.
Garbage Collection: Mengelola deallocasi memori objek yang tidak digunakan.
Type Annotations (Opsional): Memungkinkan keamanan dan konsistensi dengan kontrol data aplikasi.
Statically Typed: Menggunakan type-safe dan type inference untuk analisis types saat runtime, penting untuk mendeteksi bug.
Portability: Dapat dikompilasi ke JavaScript untuk web dan ke kode ARM/x86 untuk aplikasi native.
2. Evolusi Dart:
Diluncurkan pada 2011: Awalnya untuk pengembangan web, kini fokus pada mobile dengan Flutter.
Kompensasi JavaScript: Memecahkan masalah JavaScript dengan alat modern dan performa tinggi.
Dart 2.0 (2018): Meningkatkan performa dan fleksibilitas, mendukung pengembangan aplikasi besar dengan fitur OOP dan type annotations opsional.
3. Cara Kerja Dart:
Dart VM dan Kompilasi JavaScript:
Kompilasi JIT: Mengkompilasi kode sumber sesuai kebutuhan untuk pengembangan, mendukung debugging dan hot reload.
Kompilasi AOT: Kode dikompilasi sebelumnya untuk performa optimal, tanpa dukungan debugging atau hot reload.
Hot Reload: Memungkinkan perubahan kode yang cepat dan umpan balik instan, mempercepat pengembangan aplikasi.
4. Struktur Bahasa Dart:
Object Orientation: Dart mengikuti prinsip OOP dengan fitur seperti encapsulation, inheritance, composition, abstraction, dan polymorphism.
Operators:
Arithmetic Operators: + (penjumlahan), - (pengurangan), * (perkalian), / (pembagian), ~/ (pembagian bilangan bulat), % (modulus).
Increment/Decrement: ++var, var++, --var, var-- untuk penambahan dan pengurangan nilai variabel.
Equality and Relational Operators: == (sama), != (berbeda), > (lebih besar), < (lebih kecil), >= (lebih besar atau sama), <= (lebih kecil atau sama).
Logical Operators: ! (negasi), || (OR), && (AND).


- untuk Pertemuan 05 dan seterusnya kita akan mulai memasuki framework flutter. kita akan mempelajari mulai dari widget dasar, layout dan navigasi, manajemen plugin, plugin camera,
dasar state managemen, pemrograman Asynchrounus, lanjutan state managemen dengan streams, persistensi data dan restful API. Setelah mempelajari itu semua maka akan ada final project 
sebagai penilaian bahwa kita telah mempelajari/menyelesaikan Pemograman Mobile.  